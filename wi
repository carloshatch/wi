#!/usr/bin/env python
"""WI - Wheel Installer

This is a Python package installer relying on wheels and asyncio with the
sole goal of installing packages as fast as possible while relying as little
as possible on system's config, such as compilers or development packages
(thanks to wheels).

The idea is to enable non-blocking IO operations and take advantage of the
idle time to install already downloaded packages.

However, keep in mind this isn't meant to be a replacement for pip.

If anything, this should help spread the Python Wheels usage and enable
more discussions and work around it.

    AUTHORS:

        Carlos H. Romano <chromano@gmail.com>
"""
import asyncio
import os
import sys
import tempfile
import argparse

import aiohttp
from aiohttp.client_exceptions import ContentTypeError
from wheel.install import WheelFile

from html.parser import HTMLParser


class PyPIParser(HTMLParser):

    def __init__(self, *args, **kwargs):
        # Format is
        # <a href='url'>filename</a>
        self.all_data = []
        self.current = None
        super().__init__(*args, **kwargs)

    def handle_starttag(self, tag, attrs):
        # Keep only references in <a> tags
        if tag == 'a':
            self.current = {
                'href': [value for attr, value in attrs if attr == 'href'][0],
            }
        else:
            self.current = None

    def handle_endtag(self, tag):
        if self.current:
            self.all_data.append(self.current)

    def handle_data(self, data):
        if self.current:
            self.current['filename'] = data


PACKAGES_REPO_URL = 'https://pypi.python.org/pypi'


def log(msg):
    sys.stderr.write(msg + '\n')


async def metadata(repo_url, package, version):
    """Fetches metadata from the packages repository. Returns None
    if there's no package or package version available."""
    async with aiohttp.ClientSession() as session:
        url = [repo_url, package]
        async with session.request('GET', '/'.join(url)) as response:
            try:
                return await response.text()
            except ContentTypeError as err:
                log('Error retrieving {}'.format(url))
                print(response)
                return


async def download(url, dest):
    """Downloads an URL into the given machine's file path."""
    async with aiohttp.ClientSession() as session:
        log('Downloading ' + url)
        async with session.get(url) as response:
            open(dest, 'wb+').write(await response.read())
            log('Downloaded ' + url)


async def install(repo_url, name, version):
    """Install a wheel package into the system. It will try to use the
    best match for the machine, considering the architecture and OS.

    If the package can't be found,
    """
    package = await metadata(repo_url, name, version)
    parser = PyPIParser()
    parser.feed(package)
    # if not package:
    #     return ('missing', name, version)
    # releases = package['releases'][package['info']['version']]
    releases = parser.all_data
    # Create the full URLs
    for release in releases:
        if 'http' in release['href']:
            release['url'] = release['href']
        else:
            release['url'] = '/'.join([repo_url, release['href']])

    # Filter by version, if required
    if version:
        releases = [r for r in releases if version in r['filename']]

    with tempfile.TemporaryDirectory() as tmpdir:
        # Sorting a list of wheel.install.WheelFile instances will arrange
        # elements so the first is always the best match for the local env.
        wheels = sorted(
            ((release, WheelFile(os.path.join(tmpdir, release['filename'])))
                for release in releases
                    if release['filename'].endswith('.whl')),
            key=lambda item: item[1].rank)
        for meta, wheel in wheels:
            if wheel.compatible:
                break
        else:
            return ('nowheel', name, version)

        await download(meta['url'], wheel.filename)
        print('Installing', wheel.filename)
        wheel.install(force=True)

async def main(repo_url, requirements):
    """Install packages as defined in a requirements file. Any package
    that can't be installed will display in stdout."""
    ops = []
    with open(requirements, 'r') as fp:
        for line in fp:
            line = line.strip()
            if '==' in line:
                package, version = line.split('==', 1)
            else:
                package, version = (line, '')

            ops.append(install(repo_url, package, version))

    results = await asyncio.gather(*ops)
    for failure in results:
        if failure:
            _, package, version = failure
            print(f'{package}=={version}')

    log('wiiii')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='The wheel installer')
    parser.add_argument('--index-url', type=str,
                        default='https://pypi.python.org/simple',
                        help='Base URL of Python Package Index (default https://pypi.python.org/simple). '
                             'This should point to a repository compliant with PEP 503 '
                             '(the simple repository API) or a local directory laid '
                             'out in the same formatIndex to use')
    parser.add_argument('--trusted-host', type=str, default=None,
                        help='Mark this host as trusted, even though it does not have valid or any HTTPS')
    parser.add_argument('requirements', type=str, nargs='?',
                        default='requirements.txt',
                        help='Install from the given requirements file, default requirements.txt')
    args = parser.parse_args()

    repo_url = args.index_url
    requirements = args.requirements

    log('starting')

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main(repo_url, requirements))
    loop.close()
